PackageSet{
    Package moveit_msgs{ Specs { 
      TopicSpec RobotState{ message { "sensor_msgs.JointState" joint_state "sensor_msgs.MultiDOFJointState" multi_dof_joint_state AttachedCollisionObject[] attached_collision_objects bool is_diff }},
      TopicSpec MoveItErrorCodes{ message { int32 val int32 SUCCESS=1 int32 FAILURE=99999 int32 PLANNING_FAILED=-1 int32 INVALID_MOTION_PLAN=-2 int32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3 int32 CONTROL_FAILED=-4 int32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5 int32 TIMED_OUT=-6 int32 PREEMPTED=-7 int32 START_STATE_IN_COLLISION=-10 int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11 int32 GOAL_IN_COLLISION=-12 int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13 int32 GOAL_CONSTRAINTS_VIOLATED=-14 int32 INVALID_GROUP_NAME=-15 int32 INVALID_GOAL_CONSTRAINTS=-16 int32 INVALID_ROBOT_STATE=-17 int32 INVALID_LINK_NAME=-18 int32 INVALID_OBJECT_NAME=-19 int32 FRAME_TRANSFORM_FAILURE=-21 int32 COLLISION_CHECKING_UNAVAILABLE=-22 int32 ROBOT_STATE_STALE=-23 int32 SENSOR_INFO_STALE=-24 int32 COMMUNICATION_FAILURE=-25 int32 NO_IK_SOLUTION=-31 }},
      TopicSpec PositionConstraint{ message { Header header string link_name "geometry_msgs.Vector3" target_point_offset BoundingVolume constraint_region float64 weight }},
      TopicSpec OrientationConstraint{ message { Header header "geometry_msgs.Quaternion" orientation string link_name float64 absolute_x_axis_tolerance float64 absolute_y_axis_tolerance float64 absolute_z_axis_tolerance uint8 parameterization uint8 XYZ_EULER_ANGLES=0 uint8 ROTATION_VECTOR=1 float64 weight }},
      TopicSpec ObjectColor{ message { string id "std_msgs.ColorRGBA" color }},
      TopicSpec RobotTrajectory{ message { "trajectory_msgs.JointTrajectory" joint_trajectory "trajectory_msgs.MultiDOFJointTrajectory" multi_dof_joint_trajectory }},
      TopicSpec ExecuteTrajectoryGoal{ message { RobotTrajectory trajectory }},
      TopicSpec VisibilityConstraint{ message { float64 target_radius "geometry_msgs.PoseStamped" target_pose int32 cone_sides "geometry_msgs.PoseStamped" sensor_pose float64 max_view_angle float64 max_range_angle uint8 SENSOR_Z=0 uint8 SENSOR_Y=1 uint8 SENSOR_X=2 uint8 sensor_view_direction float64 weight }},
      TopicSpec WorkspaceParameters{ message { Header header "geometry_msgs.Vector3" min_corner "geometry_msgs.Vector3" max_corner }},
      TopicSpec TrajectoryConstraints{ message { Constraints[] constraints }},
      TopicSpec AllowedCollisionEntry{ message { bool[] enabled }},
      TopicSpec AllowedCollisionMatrix{ message { string[] entry_names AllowedCollisionEntry[] entry_values string[] default_entry_names bool[] default_entry_values }},
      TopicSpec AttachedCollisionObject{ message { string link_name CollisionObject object string[] touch_links "trajectory_msgs.JointTrajectory" detach_posture float64 weight }},
      TopicSpec BoundingVolume{ message { "shape_msgs.SolidPrimitive"[] primitives "geometry_msgs.Pose"[] primitive_poses "shape_msgs.Mesh"[] meshes "geometry_msgs.Pose"[] mesh_poses }},
      TopicSpec CartesianPoint{ message { "geometry_msgs.Pose" pose "geometry_msgs.Twist" velocity "geometry_msgs.Accel" acceleration }},
      TopicSpec CartesianTrajectory{ message { Header header string tracked_frame CartesianTrajectoryPoint[] points }},
      TopicSpec CartesianTrajectoryPoint{ message { CartesianPoint point duration time_from_start }},
      TopicSpec CollisionObject{ message { Header header "geometry_msgs.Pose" pose string id "object_recognition_msgs.ObjectType" type "shape_msgs.SolidPrimitive"[] primitives "geometry_msgs.Pose"[] primitive_poses "shape_msgs.Mesh"[] meshes "geometry_msgs.Pose"[] mesh_poses "shape_msgs.Plane"[] planes "geometry_msgs.Pose"[] plane_poses string[] subframe_names "geometry_msgs.Pose"[] subframe_poses byte ADD=0 byte REMOVE=1 byte APPEND=2 byte MOVE=3 byte operation }},
      TopicSpec ConstraintEvalResult{ message { bool result float64 distance }},
      TopicSpec Constraints{ message { string name JointConstraint[] joint_constraints PositionConstraint[] position_constraints OrientationConstraint[] orientation_constraints VisibilityConstraint[] visibility_constraints }},
      TopicSpec ContactInformation{ message { Header header "geometry_msgs.Point" position "geometry_msgs.Vector3" normal float64 depth string contact_body_1 uint32 body_type_1 string contact_body_2 uint32 body_type_2 uint32 ROBOT_LINK=0 uint32 WORLD_OBJECT=1 uint32 ROBOT_ATTACHED=2 }},
      TopicSpec CostSource{ message { float64 cost_density "geometry_msgs.Vector3" aabb_min "geometry_msgs.Vector3" aabb_max }},
      TopicSpec DisplayRobotState{ message { RobotState state ObjectColor[] highlight_links bool hide }},
      TopicSpec DisplayTrajectory{ message { string model_id RobotTrajectory[] trajectory RobotState trajectory_start }},
      TopicSpec ExecuteTrajectoryAction{ message { ExecuteTrajectoryActionGoal action_goal ExecuteTrajectoryActionResult action_result ExecuteTrajectoryActionFeedback action_feedback }},
      TopicSpec ExecuteTrajectoryActionFeedback{ message { Header header "actionlib_msgs.GoalStatus" status ExecuteTrajectoryFeedback feedback }},
      TopicSpec ExecuteTrajectoryActionGoal{ message { Header header "actionlib_msgs.GoalID" goal_id ExecuteTrajectoryGoal goal }},
      TopicSpec ExecuteTrajectoryActionResult{ message { Header header "actionlib_msgs.GoalStatus" status ExecuteTrajectoryResult result }},
      TopicSpec ExecuteTrajectoryFeedback{ message { string state }},
      TopicSpec ExecuteTrajectoryResult{ message { MoveItErrorCodes error_code }},
      TopicSpec GenericTrajectory{ message { Header header "trajectory_msgs.JointTrajectory"[] joint_trajectory "moveit_msgs.CartesianTrajectory"[] cartesian_trajectory }},
      TopicSpec Grasp{ message { string id "trajectory_msgs.JointTrajectory" pre_grasp_posture "trajectory_msgs.JointTrajectory" grasp_posture "geometry_msgs.PoseStamped" grasp_pose float64 grasp_quality GripperTranslation pre_grasp_approach GripperTranslation post_grasp_retreat GripperTranslation post_place_retreat float32 max_contact_force string[] allowed_touch_objects }},
      TopicSpec GripperTranslation{ message { "geometry_msgs.Vector3Stamped" direction float32 desired_distance float32 min_distance }},
      TopicSpec JointConstraint{ message { string joint_name float64 position float64 tolerance_above float64 tolerance_below float64 weight }},
      TopicSpec JointLimits{ message { string joint_name bool has_position_limits float64 min_position float64 max_position bool has_velocity_limits float64 max_velocity bool has_acceleration_limits float64 max_acceleration }},
      TopicSpec KinematicSolverInfo{ message { string[] joint_names "moveit_msgs.JointLimits"[] limits string[] link_names }},
      TopicSpec LinkPadding{ message { string link_name float64 padding }},
      TopicSpec LinkScale{ message { string link_name float64 scale }},
      TopicSpec MotionPlanDetailedResponse{ message { RobotState trajectory_start string group_name RobotTrajectory[] trajectory string[] description float64[] processing_time MoveItErrorCodes error_code }},
      TopicSpec MotionPlanRequest{ message { WorkspaceParameters workspace_parameters RobotState start_state Constraints[] goal_constraints Constraints path_constraints TrajectoryConstraints trajectory_constraints GenericTrajectory[] reference_trajectories string pipeline_id string planner_id string group_name int32 num_planning_attempts float64 allowed_planning_time float64 max_velocity_scaling_factor float64 max_acceleration_scaling_factor string cartesian_speed_end_effector_link float64 max_cartesian_speed }},
      TopicSpec MotionPlanResponse{ message { RobotState trajectory_start string group_name RobotTrajectory trajectory float64 planning_time MoveItErrorCodes error_code }},
      TopicSpec MotionSequenceItem{ message { MotionPlanRequest req float64 blend_radius }},
      TopicSpec MotionSequenceRequest{ message { MotionSequenceItem[] items }},
      TopicSpec MotionSequenceResponse{ message { MoveItErrorCodes error_code RobotState sequence_start RobotTrajectory[] planned_trajectories float64 planning_time }},
      TopicSpec MoveGroupAction{ message { MoveGroupActionGoal action_goal MoveGroupActionResult action_result MoveGroupActionFeedback action_feedback }},
      TopicSpec MoveGroupActionFeedback{ message { Header header "actionlib_msgs.GoalStatus" status MoveGroupFeedback feedback }},
      TopicSpec MoveGroupGoal{ message { MotionPlanRequest "request" PlanningOptions planning_options }},
      TopicSpec MoveGroupActionGoal{ message { Header header "actionlib_msgs.GoalID" goal_id MoveGroupGoal goal }},
      TopicSpec MoveGroupActionResult{ message { Header header "actionlib_msgs.GoalStatus" status MoveGroupResult result }},
      TopicSpec MoveGroupFeedback{ message { string state }},
      TopicSpec MoveGroupResult{ message { MoveItErrorCodes error_code "moveit_msgs.RobotState" trajectory_start "moveit_msgs.RobotTrajectory" planned_trajectory "moveit_msgs.RobotTrajectory" executed_trajectory float64 planning_time }},
      TopicSpec MoveGroupSequenceAction{ message { MoveGroupSequenceActionGoal action_goal MoveGroupSequenceActionResult action_result MoveGroupSequenceActionFeedback action_feedback }},
      TopicSpec MoveGroupSequenceActionFeedback{ message { Header header "actionlib_msgs.GoalStatus" status MoveGroupSequenceFeedback feedback }},
      TopicSpec MoveGroupSequenceActionGoal{ message { Header header "actionlib_msgs.GoalID" goal_id MoveGroupSequenceGoal goal }},
      TopicSpec MoveGroupSequenceActionResult{ message { Header header "actionlib_msgs.GoalStatus" status MoveGroupSequenceResult result }},
      TopicSpec MoveGroupSequenceFeedback{ message { string state }},
      TopicSpec MoveGroupSequenceGoal{ message { MotionSequenceRequest "request" PlanningOptions planning_options }},
      TopicSpec MoveGroupSequenceResult{ message { MotionSequenceResponse "response" }},
      TopicSpec OrientedBoundingBox{ message { "geometry_msgs.Pose" pose "geometry_msgs.Point32" extents }},
      TopicSpec PickupAction{ message { PickupActionGoal action_goal PickupActionResult action_result PickupActionFeedback action_feedback }},
      TopicSpec PickupActionFeedback{ message { Header header "actionlib_msgs.GoalStatus" status PickupFeedback feedback }},
      TopicSpec PickupActionGoal{ message { Header header "actionlib_msgs.GoalID" goal_id PickupGoal goal }},
      TopicSpec PickupActionResult{ message { Header header "actionlib_msgs.GoalStatus" status PickupResult result }},
      TopicSpec PickupFeedback{ message { string state }},
      TopicSpec PickupGoal{ message { string target_name string group_name string end_effector Grasp[] possible_grasps string support_surface_name bool allow_gripper_support_collision string[] attached_object_touch_links bool minimize_object_distance Constraints path_constraints string planner_id string[] allowed_touch_objects float64 allowed_planning_time PlanningOptions planning_options }},
      TopicSpec PickupResult{ message { MoveItErrorCodes error_code RobotState trajectory_start RobotTrajectory[] trajectory_stages string[] trajectory_descriptions Grasp grasp float64 planning_time }},
      TopicSpec PlaceAction{ message { PlaceActionGoal action_goal PlaceActionResult action_result PlaceActionFeedback action_feedback }},
      TopicSpec PlaceActionFeedback{ message { Header header "actionlib_msgs.GoalStatus" status PlaceFeedback feedback }},
      TopicSpec PlaceActionGoal{ message { Header header "actionlib_msgs.GoalID" goal_id PlaceGoal goal }},
      TopicSpec PlaceActionResult{ message { Header header "actionlib_msgs.GoalStatus" status PlaceResult result }},
      TopicSpec PlaceFeedback{ message { string state }},
      TopicSpec PlaceGoal{ message { string group_name string attached_object_name PlaceLocation[] place_locations bool place_eef string support_surface_name bool allow_gripper_support_collision Constraints path_constraints string planner_id string[] allowed_touch_objects float64 allowed_planning_time PlanningOptions planning_options }},
      TopicSpec PlaceLocation{ message { string id "trajectory_msgs.JointTrajectory" post_place_posture "geometry_msgs.PoseStamped" place_pose float64 quality GripperTranslation pre_place_approach GripperTranslation post_place_retreat string[] allowed_touch_objects }},
      TopicSpec PlaceResult{ message { MoveItErrorCodes error_code RobotState trajectory_start RobotTrajectory[] trajectory_stages string[] trajectory_descriptions PlaceLocation place_location float64 planning_time }},
      TopicSpec PlannerInterfaceDescription{ message { string name string pipeline_id string[] planner_ids }},
      TopicSpec PlannerParams{ message { string[] keys string[] values string[] descriptions }},
      TopicSpec PlanningOptions{ message { PlanningScene planning_scene_diff bool plan_only bool look_around int32 look_around_attempts float64 max_safe_execution_cost bool replan int32 replan_attempts float64 replan_delay }},
      TopicSpec PlanningScene{ message { string name RobotState robot_state string robot_model_name "geometry_msgs.TransformStamped"[] fixed_frame_transforms AllowedCollisionMatrix allowed_collision_matrix LinkPadding[] link_padding LinkScale[] link_scale ObjectColor[] object_colors PlanningSceneWorld world bool is_diff }},
      TopicSpec PlanningSceneComponents{ message { uint32 SCENE_SETTINGS=1 uint32 ROBOT_STATE=2 uint32 ROBOT_STATE_ATTACHED_OBJECTS=4 uint32 WORLD_OBJECT_NAMES=8 uint32 WORLD_OBJECT_GEOMETRY=16 uint32 OCTOMAP=32 uint32 TRANSFORMS=64 uint32 ALLOWED_COLLISION_MATRIX=128 uint32 LINK_PADDING_AND_SCALING=256 uint32 OBJECT_COLORS=512 uint32 components }},
      TopicSpec PlanningSceneWorld{ message { CollisionObject[] collision_objects "octomap_msgs.OctomapWithPose" octomap }},
      TopicSpec PositionIKRequest{ message { string group_name "moveit_msgs.RobotState" robot_state Constraints constraints bool avoid_collisions string ik_link_name "geometry_msgs.PoseStamped" pose_stamped string[] ik_link_names "geometry_msgs.PoseStamped"[] pose_stamped_vector duration timeout }},
      ServiceSpec ApplyPlanningScene{ request { PlanningScene scene } response { bool success } },
      ServiceSpec ChangeControlDimensions{ request { bool control_x_translation bool control_y_translation bool control_z_translation bool control_x_rotation bool control_y_rotation bool control_z_rotation } response { bool success } },
      ServiceSpec ChangeDriftDimensions{ request { bool drift_x_translation bool drift_y_translation bool drift_z_translation bool drift_x_rotation bool drift_y_rotation bool drift_z_rotation "geometry_msgs.Transform" transform_jog_frame_to_drift_frame } response { bool success } },
      ServiceSpec CheckIfRobotStateExistsInWarehouse{ request { string name string robot } response { bool exists } },
      ServiceSpec DeleteRobotStateFromWarehouse{ request { string name string robot } response {  } },
      ServiceSpec ExecuteKnownTrajectory{ request { RobotTrajectory trajectory bool wait_for_execution } response { MoveItErrorCodes error_code } },
      ServiceSpec GetCartesianPath{ request { Header header RobotState start_state string group_name string link_name "geometry_msgs.Pose"[] waypoints float64 max_step float64 jump_threshold float64 prismatic_jump_threshold float64 revolute_jump_threshold bool avoid_collisions Constraints path_constraints } response { RobotState start_state RobotTrajectory solution float64 fraction MoveItErrorCodes error_code } },
      ServiceSpec GetMotionPlan{ request { MotionPlanRequest motion_plan_request } response { MotionPlanResponse motion_plan_response } },
      ServiceSpec GetMotionSequence{ request { MotionSequenceRequest "request" } response { MotionSequenceResponse "response" } },
      ServiceSpec GetPlannerParams{ request { string pipeline_id string planner_config string group } response { PlannerParams params } },
      ServiceSpec GetPlanningScene{ request { PlanningSceneComponents components } response { PlanningScene scene } },
      ServiceSpec GetPositionFK{ request { Header header string[] fk_link_names RobotState robot_state } response { "geometry_msgs.PoseStamped"[] pose_stamped string[] fk_link_names MoveItErrorCodes error_code } },
      ServiceSpec GetPositionIK{ request { PositionIKRequest ik_request } response { RobotState solution MoveItErrorCodes error_code } },
      ServiceSpec GetRobotStateFromWarehouse{ request { string name string robot } response { "moveit_msgs.RobotState" state } },
      ServiceSpec GetStateValidity{ request { RobotState robot_state string group_name Constraints constraints } response { bool valid ContactInformation[] contacts CostSource[] cost_sources ConstraintEvalResult[] constraint_result } },
      ServiceSpec GraspPlanning{ request { string group_name CollisionObject target string[] support_surfaces Grasp[] candidate_grasps CollisionObject[] movable_obstacles } response { Grasp[] grasps MoveItErrorCodes error_code } },
      ServiceSpec ListRobotStatesInWarehouse{ request { string regex string robot } response { string[] states } },
      ServiceSpec LoadMap{ request { string filename } response { bool success } },
      ServiceSpec QueryPlannerInterfaces{ request {  } response { PlannerInterfaceDescription[] planner_interfaces } },
      ServiceSpec RenameRobotStateInWarehouse{ request { string old_name string new_name string robot } response {  } },
      ServiceSpec SaveMap{ request { string filename } response { bool success } },
      ServiceSpec SaveRobotStateToWarehouse{ request { string name string robot "moveit_msgs.RobotState" state } response { bool success } },
      ServiceSpec SetPlannerParams{ request { string pipeline_id string planner_config string group PlannerParams params bool replace } response {  } },
      ServiceSpec UpdatePointcloudOctomap{ request { "sensor_msgs.PointCloud2" cloud } response { bool success } },      
      ActionSpec ExecuteTrajectory{ goal { ExecuteTrajectoryActionGoal action_goal} result {ExecuteTrajectoryActionResult action_result} feedback {ExecuteTrajectoryActionFeedback action_feedback}},
      ActionSpec MoveGroup{ goal { MoveGroupActionGoal action_goal} result {MoveGroupActionResult action_result} feedback {MoveGroupActionFeedback action_feedback}},
      ActionSpec MoveGroupSequence{ goal { MoveGroupSequenceActionGoal action_goal} result {MoveGroupSequenceActionResult action_result} feedback {MoveGroupSequenceActionFeedback action_feedback}},
      ActionSpec Pickup{ goal { PickupActionGoal action_goal} result {PickupActionResult action_result} feedback {PickupActionFeedback action_feedback}},
      ActionSpec Place{ goal { PlaceActionGoal action_goal} result {PlaceActionResult action_result} feedback {PlaceActionFeedback action_feedback}}

    }}
  }
